#!/usr/bin/python

import os
import sys
import commands
from commands import getoutput
import time
import signal
from stem import Signal
from stem.control import Controller


class bcolors:
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    RED = '\033[31m'
    YELLOW = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    BGRED = '\033[41m'
    WHITE = '\033[37m'


def t():
    current_time = time.localtime()
    ctime = time.strftime('%H:%M:%S', current_time)
    return "["+ ctime + "]"
def shutdown():
	print ""
	print bcolors.BGRED + bcolors.WHITE + t() + "[Bilgi] VPN Kapatılıyor" + bcolors.ENDC +"\n\n"
	sys.exit()


def sigint_handler(signum, frame):
    print '\n Kullanıcı bağlantısı kesildi [Kapatılıyor]'
    shutdown()

def logo():
	os.system("clear")
	print bcolors.RED + bcolors.BOLD
	print """
▒█▀▀█ ▒█▀▀▀ ▒█▀▀█ ▒█▀▀▀█ ▒█▀▀█ ▒█▄░▒█ 　 ▒█░░▒█ ▒█▀▀█ ▒█▄░▒█ 
▒█▄▄▀ ▒█▀▀▀ ▒█▀▀▄ ▒█░░▒█ ▒█▄▄▀ ▒█▒█▒█ 　 ░▒█▒█░ ▒█▄▄█ ▒█▒█▒█ 
▒█░▒█ ▒█▄▄▄ ▒█▄▄█ ▒█▄▄▄█ ▒█░▒█ ▒█░░▀█ 　 ░░▀▄▀░ ▒█░░░ ▒█░░▀█
	

    """
	print bcolors.ENDC
def usage():
	logo()
	print """

	USAGE:
        reborn start -----(start reborn)
        reborn stop  -----(stop reborn)
	reborn switch ----(switch IP)

    """
	sys.exit()

def ip():
	while True:
		try:
			ipadd = commands.getstatusoutput('wget -qO- https://check.torproject.org | grep -Po "(?<=strong>)[\d\.]+(?=</strong)"')
		except :
			continue
		break
	return ipadd[1]

signal.signal(signal.SIGINT, sigint_handler)

TorrcCfgString = """

##/////ADDED BY reborn ///
VirtualAddrNetwork 10.0.0.0/10
AutomapHostsOnResolve 1
TransPort 9040
DNSPort 53
ControlPort 9051


"""

resolvString = "nameserver 127.0.0.1"

Torrc = "/etc/tor/torrc"
resolv = "/etc/resolv.conf"


def start_reborn():

	if TorrcCfgString in open(Torrc).read():
	    print t()+" VPN Dosyları Zaten Konfigüre Edildi"
	else:

		with open(Torrc, "a") as myfile:

			myfile.write(TorrcCfgString)
			print bcolors.GREEN+"[Başarılı]"+bcolors.ENDC
	if resolvString in open(resolv).read():
	    print t()+" DNS resolv.conf file already configured"
	else:
		with open(resolv, "w") as myfile:
			print t()+" Configuring DNS resolv.conf file.. ",
			myfile.write(resolvString)
			print bcolors.GREEN+"[Başarılı]"+bcolors.ENDC

	print t()+" Starting VPN service.. ",
	os.system("service tor start")
	print bcolors.GREEN+"[]"+bcolors.ENDC
	print t()+"IP Ayarları Yapılandırılıyor",

	iptables_rules = """
	NON_TOR="192.168.1.0/24 192.168.0.0/24"
	TOR_UID=%s
	TRANS_PORT="9040"

	iptables -F
	iptables -t nat -F

	iptables -t nat -A OUTPUT -m owner --uid-owner $TOR_UID -j RETURN
	iptables -t nat -A OUTPUT -p udp --dport 53 -j REDIRECT --to-ports 53
	for NET in $NON_TOR 127.0.0.0/9 127.128.0.0/10; do
	 iptables -t nat -A OUTPUT -d $NET -j RETURN
	done
	iptables -t nat -A OUTPUT -p tcp --syn -j REDIRECT --to-ports $TRANS_PORT

	iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	for NET in $NON_TOR 127.0.0.0/8; do
	 iptables -A OUTPUT -d $NET -j ACCEPT
	done
	iptables -A OUTPUT -m owner --uid-owner $TOR_UID -j ACCEPT
	iptables -A OUTPUT -j REJECT
	"""%(getoutput("id -ur debian-tor"))

	os.system(iptables_rules)
	print bcolors.GREEN+"[Başarılı]"+bcolors.ENDC
	print t()+" Yeni IP Alınıyor..."
	print t()+" Yeni IP : "+bcolors.GREEN+ip()+bcolors.ENDC

def stop_reborn():
	print bcolors.RED+t()+"STOPPING reborn"+bcolors.ENDC
	print t()+"IP Ayarları Yeniden Yapılandırılıyor...",
	IpFlush = """
	iptables -P INPUT ACCEPT
	iptables -P FORWARD ACCEPT
	iptables -P OUTPUT ACCEPT
	iptables -t nat -F
	iptables -t mangle -F
	iptables -F
	iptables -X
	"""
	os.system(IpFlush)

	print bcolors.GREEN+"[Başarılı]"+bcolors.ENDC
	print t()+"İnternet yöneticisi yeniden başlatılıyor",
	os.system("service network-manager restart")
	print bcolors.GREEN+"[Başarılı]"+bcolors.ENDC
	print t()+" Yeni IP Alınıyor..."
	print t()+" Yeni IP : "+bcolors.GREEN+ip()+bcolors.ENDC

def switch_tor():
	print t()+" Lütfen bekleyin..."
	time.sleep(7)
	print t()+" İşlem bekletiliyor...",
	with Controller.from_port(port = 9051) as controller:
  		controller.authenticate()
  		controller.signal(Signal.NEWNYM)
	print bcolors.GREEN+"[Başarılı]"+bcolors.ENDC
	print t()+" Yeni IP Alınıyor..."
	print t()+" Yeni IP : "+bcolors.GREEN+ip()+bcolors.ENDC

arg = sys.argv[1:]


if len(arg)!=1:
	usage()
elif sys.argv[1] == "start":
	logo()
	start_reborn()
elif sys.argv[1] == "stop":
	logo()
	stop_reborn()
elif sys.argv[1] == "switch":
	switch_tor()
else:
	usage()
